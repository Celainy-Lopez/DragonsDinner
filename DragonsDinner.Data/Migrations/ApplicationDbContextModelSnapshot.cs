// <auto-generated />
using System;
using DragonsDinner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DragonsDinner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DragonsDinner.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Carritos", b =>
                {
                    b.Property<int>("CarritoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarritoId"));

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CarritoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Carritos");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.CarritosDetalles", b =>
                {
                    b.Property<int>("DetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetalleId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CarritoId")
                        .HasColumnType("int");

                    b.Property<double>("Costo")
                        .HasColumnType("float");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("DetalleId");

                    b.HasIndex("CarritoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("CarritosDetalles");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Categorias", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriaId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            CategoriaId = 1,
                            Nombre = "Hamburguesas"
                        },
                        new
                        {
                            CategoriaId = 2,
                            Nombre = "Hot Dogs"
                        },
                        new
                        {
                            CategoriaId = 3,
                            Nombre = "Pizzas"
                        },
                        new
                        {
                            CategoriaId = 4,
                            Nombre = "Tacos"
                        },
                        new
                        {
                            CategoriaId = 5,
                            Nombre = "Refrescos"
                        },
                        new
                        {
                            CategoriaId = 6,
                            Nombre = "Donuts"
                        },
                        new
                        {
                            CategoriaId = 7,
                            Nombre = "Yaroas"
                        },
                        new
                        {
                            CategoriaId = 8,
                            Nombre = "Mofongos"
                        });
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Direcciones", b =>
                {
                    b.Property<int>("DireccionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DireccionId"));

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int");

                    b.Property<string>("Referencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DireccionId");

                    b.HasIndex("ProvinciaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Direcciones");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Estados", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadoId");

                    b.ToTable("Estados");

                    b.HasData(
                        new
                        {
                            EstadoId = 1,
                            Descripcion = "Iniciado"
                        },
                        new
                        {
                            EstadoId = 2,
                            Descripcion = "En proceso"
                        },
                        new
                        {
                            EstadoId = 3,
                            Descripcion = "Finalizado"
                        });
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.MetodosPago", b =>
                {
                    b.Property<int>("MetodoPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetodoPagoId"));

                    b.Property<bool>("MetodoPago")
                        .HasColumnType("bit");

                    b.Property<int>("TarjetaId")
                        .HasColumnType("int");

                    b.HasKey("MetodoPagoId");

                    b.HasIndex("TarjetaId");

                    b.ToTable("MetodosPagos");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Ordenes", b =>
                {
                    b.Property<int>("OrdenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrdenId"));

                    b.Property<bool>("Delivery")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("OrdenId");

                    b.ToTable("Ordenes");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.OrdenesDetalles", b =>
                {
                    b.Property<int>("DetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetalleId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<double>("Costo")
                        .HasColumnType("float");

                    b.Property<int>("OrdenId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("DetalleId");

                    b.HasIndex("OrdenId");

                    b.HasIndex("ProductoId");

                    b.ToTable("OrdenesDetalles");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Productos", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductoId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<double>("Costo")
                        .HasColumnType("float");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Existencia")
                        .HasColumnType("int");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductoId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            ProductoId = 1,
                            Cantidad = 0,
                            CategoriaId = 1,
                            Costo = 100.0,
                            Descripcion = "Hamburguesa con carne de res, queso, lechuga y tomate.",
                            Existencia = 50,
                            Imagen = "https://images.pexels.com/photos/2702674/pexels-photo-2702674.jpeg?auto=compress&cs=tinysrgb&w=600",
                            Nombre = "Hamburguesa Clásica",
                            Precio = 150.0
                        },
                        new
                        {
                            ProductoId = 2,
                            Cantidad = 0,
                            CategoriaId = 1,
                            Costo = 120.0,
                            Descripcion = "Hamburguesa con salsa BBQ, cebolla caramelizada y queso cheddar.",
                            Existencia = 40,
                            Imagen = "https://images.pexels.com/photos/3915915/pexels-photo-3915915.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Nombre = "Hamburguesa BBQ",
                            Precio = 180.0
                        },
                        new
                        {
                            ProductoId = 3,
                            Cantidad = 0,
                            CategoriaId = 1,
                            Costo = 150.0,
                            Descripcion = "Hamburguesa con carne de pollo, queso, lechuga y tomate.",
                            Existencia = 30,
                            Imagen = "https://images.pexels.com/photos/13573664/pexels-photo-13573664.jpeg?auto=compress&cs=tinysrgb&w=600",
                            Nombre = "Hamburguesa de Pollo",
                            Precio = 200.0
                        },
                        new
                        {
                            ProductoId = 4,
                            Cantidad = 0,
                            CategoriaId = 2,
                            Costo = 50.0,
                            Descripcion = "Hot dog con salchicha, ketchup y mostaza.",
                            Existencia = 60,
                            Imagen = "https://imag.bonviveur.com/hot-dog.jpg",
                            Nombre = "Hot Dog Clásico",
                            Precio = 80.0
                        },
                        new
                        {
                            ProductoId = 5,
                            Cantidad = 0,
                            CategoriaId = 2,
                            Costo = 70.0,
                            Descripcion = "Hot dog con salchicha, queso derretido y cebolla.",
                            Existencia = 50,
                            Imagen = "https://img.freepik.com/fotos-premium/queso-derretido-llovizna-mostaza-hot-dog-bollo-mano_124507-125314.jpg",
                            Nombre = "Hot Dog con Queso",
                            Precio = 100.0
                        },
                        new
                        {
                            ProductoId = 6,
                            Cantidad = 0,
                            CategoriaId = 3,
                            Costo = 200.0,
                            Descripcion = "Pizza con salsa de tomate, carne molida, pepperoni queso mozzarella.",
                            Existencia = 20,
                            Imagen = "https://imag.bonviveur.com/pizza-de-carne-picada.jpg",
                            Nombre = "Pizza Carnivora",
                            Precio = 300.0
                        },
                        new
                        {
                            ProductoId = 7,
                            Cantidad = 0,
                            CategoriaId = 3,
                            Costo = 250.0,
                            Descripcion = "Pizza con queso mozzarella y pepperoni.",
                            Existencia = 25,
                            Imagen = "https://pizzeriabellaroma.es/wp-content/uploads/receta-de-pizza-de-pepperoni.jpg",
                            Nombre = "Pizza Pepperoni",
                            Precio = 350.0
                        },
                        new
                        {
                            ProductoId = 8,
                            Cantidad = 0,
                            CategoriaId = 3,
                            Costo = 300.0,
                            Descripcion = "Pizza con mezcla de cuatro tipos de quesos.",
                            Existencia = 15,
                            Imagen = "https://www.hola.com/horizon/landscape/e8bb41b65869-pizzacuatroquesos-adob-t.jpg",
                            Nombre = "Pizza Cuatro Quesos",
                            Precio = 400.0
                        },
                        new
                        {
                            ProductoId = 9,
                            Cantidad = 0,
                            CategoriaId = 4,
                            Costo = 70.0,
                            Descripcion = "Taco con carne, queso y vegetales.",
                            Existencia = 35,
                            Imagen = "https://s3.amazonaws.com/arc-wordpress-client-uploads/infobae-wp/wp-content/uploads/2018/09/11000515/taco-pescado-receta.jpg",
                            Nombre = "Taco Clásico",
                            Precio = 100.0
                        },
                        new
                        {
                            ProductoId = 10,
                            Cantidad = 0,
                            CategoriaId = 4,
                            Costo = 90.0,
                            Descripcion = "Taco con pollo, queso y salsa especial.",
                            Existencia = 30,
                            Imagen = "https://cdn.bolivia.com/gastronomia/2018/11/30/tacos-de-pollo-3391-1.jpg",
                            Nombre = "Taco de Pollo",
                            Precio = 120.0
                        },
                        new
                        {
                            ProductoId = 11,
                            Cantidad = 0,
                            CategoriaId = 5,
                            Costo = 30.0,
                            Descripcion = "Refresco tradicional dominicano.",
                            Existencia = 100,
                            Imagen = "https://supermercadosnacional.com/media/catalog/product/cache/fde49a4ea9a339628caa0bc56aea00ff/2/2/2228901-1__1720643724.jpg",
                            Nombre = "Refresco Red Rock",
                            Precio = 50.0
                        },
                        new
                        {
                            ProductoId = 12,
                            Cantidad = 0,
                            CategoriaId = 5,
                            Costo = 30.0,
                            Descripcion = "Refresco de uva con sabor único dominicano.",
                            Existencia = 90,
                            Imagen = "https://www.coca-cola.com/content/dam/onexp/do/es/brands/country-club/country_club_uva.jpg",
                            Nombre = "Refresco Country Club Uva",
                            Precio = 50.0
                        },
                        new
                        {
                            ProductoId = 13,
                            Cantidad = 0,
                            CategoriaId = 5,
                            Costo = 30.0,
                            Descripcion = "Refresco sabor merengue dominicano.",
                            Existencia = 80,
                            Imagen = "https://www.coca-cola.com/content/dam/onexp/do/es/brands/country-club/country_club_merengue.jpg",
                            Nombre = "Refresco Country Club Merengue",
                            Precio = 50.0
                        },
                        new
                        {
                            ProductoId = 14,
                            Cantidad = 0,
                            CategoriaId = 6,
                            Costo = 40.0,
                            Descripcion = "Donut clásica con glaseado.",
                            Existencia = 50,
                            Imagen = "https://img.freepik.com/fotos-premium/donut-chocolate-glaseado-chocolate-espolvorea-sobre-el_667286-842.jpg",
                            Nombre = "Donut Glaseada",
                            Precio = 70.0
                        },
                        new
                        {
                            ProductoId = 15,
                            Cantidad = 0,
                            CategoriaId = 6,
                            Costo = 50.0,
                            Descripcion = "Donut cubierta de chocolate.",
                            Existencia = 45,
                            Imagen = "https://img.freepik.com/fotos-premium/donut-chocolate-glaseado-chocolate-espolvorea-sobre-el_667286-842.jpg",
                            Nombre = "Donut de Chocolate",
                            Precio = 80.0
                        },
                        new
                        {
                            ProductoId = 16,
                            Cantidad = 0,
                            CategoriaId = 6,
                            Costo = 30.0,
                            Descripcion = "Donut espolvoreada con azúcar.",
                            Existencia = 40,
                            Imagen = "https://i.pinimg.com/736x/02/fe/85/02fe858efe818cc76f9a7dcab1c9256f.jpg",
                            Nombre = "Donut con Azúcar",
                            Precio = 60.0
                        },
                        new
                        {
                            ProductoId = 17,
                            Cantidad = 0,
                            CategoriaId = 7,
                            Costo = 100.0,
                            Descripcion = "Yaroa con pollo y queso derretido.",
                            Existencia = 25,
                            Imagen = "https://dyj6gt4964deb.cloudfront.net/images/b44d0aa7-53a3-41ac-b858-1cff970799de.jpeg",
                            Nombre = "Yaroa de Pollo",
                            Precio = 150.0
                        },
                        new
                        {
                            ProductoId = 18,
                            Cantidad = 0,
                            CategoriaId = 7,
                            Costo = 120.0,
                            Descripcion = "Yaroa con carne de res y queso.",
                            Existencia = 20,
                            Imagen = "https://www.afuegoalto.com/wp-content/uploads/2021/01/20160716_235522-01-600x338.jpeg",
                            Nombre = "Yaroa de Res",
                            Precio = 170.0
                        },
                        new
                        {
                            ProductoId = 19,
                            Cantidad = 0,
                            CategoriaId = 8,
                            Costo = 180.0,
                            Descripcion = "Mofongo con ajo y chicharrón.",
                            Existencia = 15,
                            Imagen = "https://dyj6gt4964deb.cloudfront.net/images/f7a0fb38-d918-45e3-a7d7-39c2aeaedc0e.jpeg",
                            Nombre = "Mofongo Clásico",
                            Precio = 250.0
                        },
                        new
                        {
                            ProductoId = 20,
                            Cantidad = 0,
                            CategoriaId = 8,
                            Costo = 220.0,
                            Descripcion = "Mofongo con camarones y salsa especial.",
                            Existencia = 10,
                            Imagen = "https://static.wixstatic.com/media/07359e_65d3c58086bc45f8ae295f10ec354ce0~mv2.jpg/v1/fill/w_480,h_480,al_c,q_80,usm_0.66_1.00_0.01,enc_auto/07359e_65d3c58086bc45f8ae295f10ec354ce0~mv2.jpg",
                            Nombre = "Mofongo con Camarones",
                            Precio = 300.0
                        });
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Provincias", b =>
                {
                    b.Property<int>("ProvinciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinciaId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinciaId");

                    b.ToTable("Provincias");

                    b.HasData(
                        new
                        {
                            ProvinciaId = 1,
                            Nombre = "Distrito Nacional"
                        },
                        new
                        {
                            ProvinciaId = 2,
                            Nombre = "Azua"
                        },
                        new
                        {
                            ProvinciaId = 3,
                            Nombre = "Bahoruco"
                        },
                        new
                        {
                            ProvinciaId = 4,
                            Nombre = "Barahona"
                        },
                        new
                        {
                            ProvinciaId = 5,
                            Nombre = "Dajabón"
                        },
                        new
                        {
                            ProvinciaId = 6,
                            Nombre = "Duarte"
                        },
                        new
                        {
                            ProvinciaId = 7,
                            Nombre = "Elías Piña"
                        },
                        new
                        {
                            ProvinciaId = 8,
                            Nombre = "El Seibo"
                        },
                        new
                        {
                            ProvinciaId = 9,
                            Nombre = "Espaillat"
                        },
                        new
                        {
                            ProvinciaId = 10,
                            Nombre = "Hato Mayor"
                        },
                        new
                        {
                            ProvinciaId = 11,
                            Nombre = "Hermanas Mirabal"
                        },
                        new
                        {
                            ProvinciaId = 12,
                            Nombre = "Independencia"
                        },
                        new
                        {
                            ProvinciaId = 13,
                            Nombre = "La Altagracia"
                        },
                        new
                        {
                            ProvinciaId = 14,
                            Nombre = "La Romana"
                        },
                        new
                        {
                            ProvinciaId = 15,
                            Nombre = "La Vega"
                        },
                        new
                        {
                            ProvinciaId = 16,
                            Nombre = "María Trinidad Sánchez"
                        },
                        new
                        {
                            ProvinciaId = 17,
                            Nombre = "Monseñor Nouel"
                        },
                        new
                        {
                            ProvinciaId = 18,
                            Nombre = "Monte Cristi"
                        },
                        new
                        {
                            ProvinciaId = 19,
                            Nombre = "Monte Plata"
                        },
                        new
                        {
                            ProvinciaId = 20,
                            Nombre = "Pedernales"
                        },
                        new
                        {
                            ProvinciaId = 21,
                            Nombre = "Peravia"
                        },
                        new
                        {
                            ProvinciaId = 22,
                            Nombre = "Puerto Plata"
                        },
                        new
                        {
                            ProvinciaId = 23,
                            Nombre = "Samaná"
                        },
                        new
                        {
                            ProvinciaId = 24,
                            Nombre = "San Cristóbal"
                        },
                        new
                        {
                            ProvinciaId = 25,
                            Nombre = "San José de Ocoa"
                        },
                        new
                        {
                            ProvinciaId = 26,
                            Nombre = "San Juan"
                        },
                        new
                        {
                            ProvinciaId = 27,
                            Nombre = "San Pedro de Macorís"
                        },
                        new
                        {
                            ProvinciaId = 28,
                            Nombre = "Sánchez Ramírez"
                        },
                        new
                        {
                            ProvinciaId = 29,
                            Nombre = "Santiago"
                        },
                        new
                        {
                            ProvinciaId = 30,
                            Nombre = "Santiago Rodríguez"
                        },
                        new
                        {
                            ProvinciaId = 31,
                            Nombre = "Valverde"
                        },
                        new
                        {
                            ProvinciaId = 32,
                            Nombre = "Hermanas Mirabal"
                        });
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Tarjetas", b =>
                {
                    b.Property<int>("TarjetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TarjetaId"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FechaVencimiento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeroTarjeta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TarjetaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Tarjetas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Usuarios", b =>
                {
                    b.HasBaseType("DragonsDinner.Data.ApplicationUser");

                    b.Property<string>("FotoPerfil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrdenId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasIndex("OrdenId");

                    b.HasDiscriminator().HasValue("Usuarios");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Carritos", b =>
                {
                    b.HasOne("DragonsDinner.Data.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.CarritosDetalles", b =>
                {
                    b.HasOne("DragonsDinner.Data.Models.Carritos", "Carrito")
                        .WithMany("CarritoDetalle")
                        .HasForeignKey("CarritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsDinner.Data.Models.Productos", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Direcciones", b =>
                {
                    b.HasOne("DragonsDinner.Data.Models.Provincias", "Provincia")
                        .WithMany()
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsDinner.Data.ApplicationUser", "Usuario")
                        .WithMany("Direcciones")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Provincia");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.MetodosPago", b =>
                {
                    b.HasOne("DragonsDinner.Data.Models.Tarjetas", "Tarjeta")
                        .WithMany()
                        .HasForeignKey("TarjetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarjeta");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.OrdenesDetalles", b =>
                {
                    b.HasOne("DragonsDinner.Data.Models.Ordenes", "Orden")
                        .WithMany("OrdenesDetalles")
                        .HasForeignKey("OrdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsDinner.Data.Models.Productos", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orden");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Productos", b =>
                {
                    b.HasOne("DragonsDinner.Data.Models.Categorias", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsDinner.Data.Models.Usuarios", null)
                        .WithMany("Productos")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Tarjetas", b =>
                {
                    b.HasOne("DragonsDinner.Data.ApplicationUser", "Usuario")
                        .WithMany("Tarjetas")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DragonsDinner.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DragonsDinner.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsDinner.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DragonsDinner.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Usuarios", b =>
                {
                    b.HasOne("DragonsDinner.Data.Models.Ordenes", "Orden")
                        .WithMany()
                        .HasForeignKey("OrdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orden");
                });

            modelBuilder.Entity("DragonsDinner.Data.ApplicationUser", b =>
                {
                    b.Navigation("Direcciones");

                    b.Navigation("Tarjetas");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Carritos", b =>
                {
                    b.Navigation("CarritoDetalle");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Ordenes", b =>
                {
                    b.Navigation("OrdenesDetalles");
                });

            modelBuilder.Entity("DragonsDinner.Data.Models.Usuarios", b =>
                {
                    b.Navigation("Productos");
                });
#pragma warning restore 612, 618
        }
    }
}
