@page "/Productos/Edit/{ProductoId:int}"
@rendermode InteractiveServer
@inject ProductosService productosService
@inject CategoriasService categoriasService
@inject NavigationManager navigation
@inject ToastService Toast

<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<link href="CreateCategorias.css" rel="stylesheet" />

<EditForm Model="@Productos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card central-card shadow-lg">
            <div class="card-header text-center">
                <h2 class="card-title">Crear Producto</h2>
            </div>

            <div class="card-body">
                @*Producto ID*@
                <div class="mb-3">
                    <label for="CategoriaId" class="form-label"><strong>Producto Id</strong></label>
                    <InputNumber class="form-control" @bind-Value="Productos.ProductoId" readonly></InputNumber>
                </div>

                @*Nombre*@
                <div class="mb-3">
                    <label for="Nombre" class="form-label"><strong>Nombre</strong></label>
                    <InputText class="form-control" @bind-Value="Productos.Nombre"></InputText>
                    <ValidationMessage For="(() => Productos.Nombre)" />
                </div>

                @*Existencia*@
                <div class="mb-3">
                    <label for="existencia" class="form-label"><strong>Existencia</strong></label>
                    <InputNumber class="form-control" @bind-Value="Productos.Existencia"></InputNumber>
                    <ValidationMessage For="(() => Productos.Existencia)" />
                </div>

                @*Descripcion*@
                <div class="mb-3">
                    <label for="Descripcion" class="form-label"><strong>Descripcion</strong></label>
                    <InputText class="form-control" @bind-Value="Productos.Descripcion"></InputText>
                    <ValidationMessage For="(() => Productos.Descripcion)" />
                </div>

                @*Costo*@
                <div class="mb-3">
                    <label for="Costo" class="form-label"><strong>Costo</strong></label>
                    <InputNumber class="form-control" @bind-Value="Productos.Costo"></InputNumber>
                    <ValidationMessage For="(() => Productos.Costo)" />
                </div>

                @*Precio*@
                <div class="mb-3">
                    <label for="precio" class="form-label"><strong>Precio</strong></label>
                    <InputNumber class="form-control" @bind-Value="Productos.Precio"></InputNumber>
                    <ValidationMessage For="(() => Productos.Precio)" />
                </div>

                @*Categoria*@
                <div class="mb-3">
                    <label for="Categoria" class="form-label"><strong>Categoria</strong></label>
                    <InputSelect id="DeudorId" class="form-control" @bind-Value="Productos.CategoriaId">
                        <option value="0" selected disabled>-- Seleccione una categoria --</option>
                        @foreach (var categoria in Categorias)
                        {
                            <option value="@categoria.CategoriaId">@categoria.Nombre</option>
                        }
                    </InputSelect>
                </div>


                @* Foto *@
                <div class="mb-3">
                    <label for="Foto" class="form-label"><strong>Foto</strong></label>
                    <InputFile OnChange="CargarFoto" class="form-control" />
                    @if (!string.IsNullOrEmpty(Productos.Imagen))
                    {
                        <div class="mt-3">
                            <p><strong>Vista previa:</strong></p>
                            <img src="@Productos.Imagen" alt="Foto del producto" style="max-width: 200px; max-height: 200px;" />
                        </div>
                    }
                    <ValidationMessage For="(() => Productos.Imagen)" />
                </div>

            </div>

            <div class="card-footer">
                <a href="/Productos/Index" class="btn btn-orange bi bi-arrow-left mt-3"> Volver</a>
                <button type="submit" class="btn btn-orange bi bi-floppy mt-3"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ProductoId { get; set; }
    public ProductosDto Productos { get; set; } = new ProductosDto();
    public List<CategoriasDto> Categorias { get; set; } = new List<CategoriasDto>();
    public string Mensaje { get; set; } = string.Empty;
    public string MensajeDescripcion { get; set; } = string.Empty;
    public string MensajeExistencia { get; set; } = string.Empty;
    public string MensajePrecio { get; set; } = string.Empty;
    public string MensajeCosto { get; set; } = string.Empty;
    public string MensajeCategoria { get; set; } = string.Empty;
    public string MensajeImagen { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Productos = await productosService.Buscar(ProductoId);
        Categorias = await categoriasService.Listar(C => C.CategoriaId > 0);
    }

    private async Task CargarFoto(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        if (archivo != null)
        {
            // Limita el tamaño máximo permitido (por ejemplo, 5 MB)
            const long maxAllowedSize = 1024 * 1024 * 5;

            if (archivo.Size > maxAllowedSize)
            {
                // Maneja el error si el archivo excede el tamaño permitido
                throw new Exception("El archivo excede el tamaño máximo permitido de 5 MB.");
            }

            using var memoryStream = new MemoryStream();
            // Copia el contenido del archivo al MemoryStream
            await archivo.OpenReadStream(maxAllowedSize).CopyToAsync(memoryStream);

            // Convierte el contenido del archivo en una cadena Base64
            var base64String = Convert.ToBase64String(memoryStream.ToArray());
            Productos.Imagen = $"data:{archivo.ContentType};base64,{base64String}";
            StateHasChanged();
        }
    }




    public async Task Guardar()
    {
        if (string.IsNullOrEmpty(Productos.Nombre))
        {
            Toast.Notify(new(ToastType.Danger, $"El Nombre del producto no puede estar vacio."));
            return;
        }
        bool nombreExiste = false;
        if (Productos.ProductoId == 0 || Productos.Nombre != await productosService.ObtenerNombrePorId(Productos.ProductoId))
        {
            nombreExiste = await productosService.NombreExiste(Productos.Nombre);
        }
        if (Productos.Existencia <= 0)
        {
            Toast.Notify(new(ToastType.Danger, $"La existencia no puede ser 0."));
            return;
        }
        if (string.IsNullOrWhiteSpace(Productos.Descripcion))
        {
            Toast.Notify(new(ToastType.Danger, $"la Descripcion del producto no puede estar vacia."));
            return;
        }
        if (Productos.Costo <= 0)
        {
            Toast.Notify(new(ToastType.Danger, $"El costo del producto no puede ser menos o igual a 0."));
            return;
        }
        if (Productos.Precio <= 0)
        {
            Toast.Notify(new(ToastType.Danger, $"El precio del producto no puede ser menos o igual a 0."));
            return;
        }
        if (Productos.Precio <= Productos.Costo)
        {
            Toast.Notify(new(ToastType.Danger, $"El precio del producto no puede ser menor o igual al costo del mismo."));
            return;
        }
        if (Productos.Categoria.CategoriaId <= 0)
        {
            Toast.Notify(new(ToastType.Danger, $"Debe seleccionar una categoría."));
            return;
        }
        if (string.IsNullOrEmpty(Productos.Imagen))
        {
            Toast.Notify(new(ToastType.Danger, $"Debe subir una imagen del producto."));
            return;
        }
        await productosService.Guardar(Productos);
        Productos = new ProductosDto();
        Toast.Notify(new(ToastType.Success, $"La Categoria ha sido editada exitosamente."));
        await Task.Delay(3000);
        navigation.NavigateTo("/Productos/Index");
    }
}
