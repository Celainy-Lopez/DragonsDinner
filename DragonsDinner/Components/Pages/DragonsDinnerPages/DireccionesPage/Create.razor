@page "/Direcciones/Create"
@rendermode InteractiveServer
@inject DireccionesService direccionesService
@inject ProvinciasService provinciasService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@inject ToastService Toast

<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" /> 
<!-- bootstrap core css -->
<link rel="stylesheet" type="text/css" href="css/bootstrap.css" />

<!--owl slider stylesheet -->
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css" />
<!-- nice select  -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-nice-select/1.1.0/css/nice-select.min.css" integrity="sha512-CruCP+TD3yXzlvvijET8wV5WxxEh5H8P4cmz0RFbKK6FlZ2sYl3AEsKlLPHbniXKSrDdFewhbmBK5skbdsASbQ==" crossorigin="anonymous" />
<!-- font awesome style -->
<link href="css/font-awesome.min.css" rel="stylesheet" />

<!-- Custom styles for this template -->
<link href="css/style.css" rel="stylesheet" />
<!-- responsive style -->
<link href="css/responsive.css" rel="stylesheet" />

<AutorizedView>
    <Autorized>

        <div class="bg-box">
            <img src="/images/Fondo.jpg" alt="">
        </div>

        <PageTitle>Nueva direcci&oacute;n</PageTitle>
        <EditForm Model="Direccion" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />

            <div class="container">
                <div class="card shadow-lg">

                    <div class="card-body ">
                        <!-- book section -->
                        <section class="book_section">
                            <div class="container ">
                                <div class="heading_container align-items-center">
                                    <h2>
                                        Nueva Direcci&oacute;n
                                    </h2>
                                </div>
                                <div class="row">
                                    <div>
                                        <div class="form_container">
                                            <div class="col-md-5">
                                                <div>
                                                    @* Nombre *@
                                                    <InputText id="nombre" class="form-control" @bind-Value="Direccion.Nombre" placeholder="Nombre"></InputText>
                                                    <ValidationMessage For="(() => Direccion.Nombre)" />
                                                </div>
                                                <div>
                                                    @*Provincia*@
                                                    <InputSelect id="provincia" class="form-control form-select" @bind-Value="Direccion.ProvinciaId">
                                                        <option value="0" selected disabled>Provincia</option>
                                                        @foreach (var provincia in ListProvincias)
                                                        {
                                                            <option value="@provincia.ProvinciaId">(@provincia.ProvinciaId) -- @provincia.Nombre</option>
                                                        }
                                                    </InputSelect>
                                                    <ValidationMessage For="(() => Direccion.ProvinciaId)" />
                                                </div>
                                                <div>
                                                    @* Municipio *@
                                                    <InputText id="municipio" class="form-control" @bind-Value="Direccion.Municipio" placeholder="Municipio"></InputText>
                                                    <ValidationMessage For="(() => Direccion.Municipio)" />
                                                </div>
                                                <div>
                                                    @* Calle *@
                                                    <InputText id="calle" class="form-control" @bind-Value="Direccion.Calle" placeholder="Calle"></InputText>
                                                    <ValidationMessage For="(() => Direccion.Calle)" />
                                                </div>
                                                <div>
                                                    @* Número *@
                                                    <InputText id="referencia" class="form-control" @bind-Value="Direccion.Numero" placeholder="Número"></InputText>
                                                    <ValidationMessage For="(() => Direccion.Numero)" />
                                                </div>
                                                <div>
                                                    @* Referencia *@
                                                    <InputText id="referencia" class="form-control" @bind-Value="Direccion.Referencia" placeholder="Referencia"></InputText>
                                                    <ValidationMessage For="(() => Direccion.Referencia)" />
                                                </div>



                                            </div>
                                            <div class="card-footer text-center">
                                                <a href="/Direcciones/Index">
                                                    <button type="button" class=" btn btn-outline-secondary bi bi-arrow-left mt-3">Volver</button>
                                                </a>
                                                <button type="submit" class="btn btn-outline-success bi bi-floppy"> Guardar</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </section>
                        <!-- end book section -->
                    </div>
                </div>
            </div>
        </EditForm>

    </Autorized>
</AutorizedView>


@code {
    public DireccionesDto Direccion { get; set; } = new DireccionesDto();
    public List<ProvinciasDto> ListProvincias { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        ListProvincias = await provinciasService.Listar(a => true);

    }

    public async Task Guardar()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Verificar si el usuario no está autenticado
        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            Toast.Notify(new(ToastType.Warning, $"Debe iniciar sesión para guardar una direccion."));
            await Task.Delay(4000);
            navigationManager.NavigateTo("/Account/Login");
            return;
        }

        // Obtener el ID del usuario autenticado
        string? usuarioId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(usuarioId))
        {
            Toast.Notify(new(ToastType.Danger, $"No se pudo obtener el ID del usuario."));
            return;
        }

        // Asignar el ID del usuario a la direccion
        Direccion.UsuarioId = usuarioId;
        if (await direccionesService.Existe(Direccion.DireccionId))
        {
            Toast.Notify(new(ToastType.Danger, $"La direccion existe. Por favor, elija otra."));
            return;
        }
        if (Direccion.ProvinciaId == 0)
        {
            Toast.Notify(new(ToastType.Danger, $"Seleccione una provincia"));
            return;
        }
        else if (Direccion.Municipio == null)
        {
            Toast.Notify(new(ToastType.Danger, $"Ingrese un municipio"));
            return;
        }
        else if (Direccion.Calle == null)
        {
            Toast.Notify(new(ToastType.Danger, $"Ingrese una calle"));
            return;
        }
        else if (Direccion.Numero == null)
        {
            Toast.Notify(new(ToastType.Danger, $"Ingrese un numero de casa/apartamento"));
            return;
        }
        else
        {
            Direccion.Nombre = (Direccion.Nombre == null) ? "-" : Direccion.Nombre;
            Direccion.Referencia = (Direccion.Referencia == null) ? "-" : Direccion.Referencia;

            await direccionesService.Guardar(Direccion);
            Direccion = new DireccionesDto();
            Toast.Notify(new(ToastType.Success, $"Dirección agregada correctamente"));
            await Task.Delay(3000);
            navigationManager.NavigateTo("/Direcciones/Index");

        }
    }

}
