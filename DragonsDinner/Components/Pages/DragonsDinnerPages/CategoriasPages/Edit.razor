@page "/Categorias/Edit/{CategoriaId:int}"
@rendermode InteractiveServer
@inject CategoriasService categoriasService
@inject NavigationManager navigation
@inject ToastService Toast

<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<link href="CreateCategorias.css" rel="stylesheet" />

<PageTitle>Editar Categoria</PageTitle>

<EditForm Model="@Categorias" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card central-card shadow-lg">
            <div class="card-header text-center">
                <h2 class="card-title">Editar Categoria</h2>
            </div>

            <div class="card-body">
                @*Categoria ID*@
                <div class="mb-3">
                    <label for="CategoriaId" class="form-label"><strong>Categoria Id</strong></label>
                    <InputNumber class="form-control" @bind-Value="Categorias.CategoriaId" readonly></InputNumber>
                </div>

                @*Nombre*@
                <div class="mb-3">
                    <label for="Nombre" class="form-label"><strong>Nombre</strong></label>
                    <InputText class="form-control" @bind-Value="Categorias.Nombre"></InputText>
                    <ValidationMessage For="(() => Categorias.Nombre)" />
                </div>
            </div>

            <div class="card-footer">
                <a href="/Categorias/Index" class="btn btn-orange bi bi-arrow-left mt-3"> Volver</a>
                <button type="submit" class="btn btn-orange bi bi-floppy mt-3"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int CategoriaId { get; set; }
    public CategoriasDto Categorias { get; set; } = new CategoriasDto();
    public string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Categorias = await categoriasService.Buscar(CategoriaId);
    }

    public async Task Guardar()
    {
        if (string.IsNullOrEmpty(Categorias.Nombre))
        {
            Toast.Notify(new(ToastType.Danger, $"El Nombre de la categoria no puede estar vacio."));
            return;
        }
        bool nombreExiste = await categoriasService.NombreExiste(Categorias.Nombre);
        if (nombreExiste)
        {
            Toast.Notify(new(ToastType.Danger, $"El Nombre de la categoria ya existe."));
            return;
        }
        await categoriasService.Guardar(Categorias);
        Categorias = new CategoriasDto();
        Toast.Notify(new(ToastType.Success, $"La Categoria ha sido registrada exitosamente."));
        await Task.Delay(3000);
        navigation.NavigateTo("/Categorias/Index");
    }
}