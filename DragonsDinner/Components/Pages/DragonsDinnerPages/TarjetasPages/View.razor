@page "/Tarjetas/Details/{TarjetaId:int}"
@using System.Text.RegularExpressions
@rendermode InteractiveServer
@inject TarjetasService tarjetasService
@inject NavigationManager navigation
@inject ToastService Toast



<PageTitle> Ver tarjeta</PageTitle>

<link rel=" stylesheet" href="/Estilos/Tarjetas.css" />

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header text-center">
            <h5><strong>Datos de mi Tarjeta</strong></h5>
        </div>

        <div class="card-body">
            <div class="credit-card @VisaStyle @MasterCardStyle">
                <div class="bank">@CardLabel</div>
                <div class="card-info">
                    <div>
                        <label for="cardNumber">Número de Tarjeta:</label>
                        <input type="text" id="cardNumber" value="@Tarjeta.NumeroTarjeta" disabled>
                    </div>
                    <div>
                        <label for="name">Nombres:</label>
                        <input type="text" id="name" value="@Tarjeta.Nombres" disabled>
                    </div>
                    <div>
                        <label for="expiry">Fecha de Vencimiento:</label>
                        <input type="text" id="expiry" value="@Tarjeta.FechaVencimiento" disabled>
                    </div>
                    <div>
                        <label for="cvv">CVV:</label>
                        <input type="text" id="cvv" value="@Tarjeta.CVV" disabled>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card-footer text-center">
        <a href="/" class="btn btn-outline-secondary bi bi-arrow-left"> Volver</a>
    </div>
</div>

@code {
    [Parameter]
    public int TarjetaId { get; set; }
    public TarjetasDto Tarjeta { get; set; } = new TarjetasDto();

    protected override async Task OnInitializedAsync()
    {
        Tarjeta = await tarjetasService.Buscar(TarjetaId);
    }

    // Para Visa (13 o 16 dígitos)
    string patronVisa = @"^4[0-9]{12}(?:[0-9]{3})?$";
    string? VisaStyle => Regex.IsMatch(Tarjeta.NumeroTarjeta, patronVisa) ? "visa-style" : null;


    // Para Mastercard (16 dígitos)
    string patronMastercard = @"^5[1-5][0-9]{14}$";
    string? MasterCardStyle => Regex.IsMatch(Tarjeta.NumeroTarjeta, patronMastercard) ? "mastercard-style" : null;

    string CardLabel
    {
        get
        {
            if (VisaStyle is not null) return "Visa";
            if (MasterCardStyle is not null) return "MasterCard";
            else return "Desconocido";
        }
    }
} 