@page "/Tarjetas/Create"
@using System.Text.RegularExpressions
@rendermode InteractiveServer
@inject TarjetasService tarjetasService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigation
@inject ToastService Toast


<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<link rel=" stylesheet" href="/Estilos/Tarjetas.css" />

<PageTitle>Agregar Tarjetas</PageTitle>

<EditForm Model="@Tarjetas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Guardar Tarjetas</h5>
            </div>

            <div class="card-body tarjeta">
                <div>
                    @*Id*@
                    <div>
                        <label class="form-label"><strong>Id</strong></label>
                        <InputNumber class="form-control" readonly @bind-Value="Tarjetas.TarjetaId"> </InputNumber>
                    </div>
                    @*Número de Tarjeta*@
                    <div>
                        <label class="form-label" for="NumeroTarjeta"><strong>N&uacute;mero tarjeta</strong></label>
                        <input type="number" class="form-control" id="NumeroTarjeta" placeholder="7735 4299 1255 0133"
                               @bind="Tarjetas.NumeroTarjeta" @bind:event="oninput">
                        </input>
                        <ValidationMessage For="(() => Tarjetas.NumeroTarjeta)"></ValidationMessage>

                    </div>

                    @*Nombre*@
                    <div>
                        <label class="form-label" for="Nombre"><strong>Nombre</strong></label>
                        <InputText class="form-control" id="Nombre" placeholder="John Walker" @bind-Value="Tarjetas.Nombres"></InputText>
                        <ValidationMessage For="(() => Tarjetas.Nombres)"></ValidationMessage>

                    </div>

                    @*Fecha de Vencimiento*@
                    <div>
                        <label for="FechaVencimiento" class="form-label"><strong>Valido hasta</strong></label>
                        <InputText class="form-control" id="FechaVencimiento" @bind-Value="Tarjetas.FechaVencimiento"
                                   placeholder="01/2028" />
                        <ValidationMessage For="(() => Tarjetas.FechaVencimiento)"></ValidationMessage>

                    </div>

                    @*CVV*@
                    <div>
                        <label for="CVV" class="form-label"><strong>CVV</strong></label>
                        <InputText class="form-control" placeholder="351" id="CVV" @bind-Value="Tarjetas.CVV"></InputText>
                        <ValidationMessage For="(() => Tarjetas.CVV)"></ValidationMessage>

                    </div>
                </div>
                <div>
                    <div class="credit-card @VisaStyle @MasterCardStyle">
                        <div class="bank">@CardLabel</div>
                        <div class="card-info">
                            @*Número de Tarjeta*@
                            <div>
                                <label class="form-label" for="NumeroTarjeta">N&uacute;mero tarjeta</label>
                                <input type="number" class="form-control" id="NumeroTarjeta" placeholder="7735 4299 1255 0133"
                                       @bind="Tarjetas.NumeroTarjeta" @bind:event="oninput">
                                </input>
                                <ValidationMessage For="(() => Tarjetas.NumeroTarjeta)"></ValidationMessage>
                            </div>

                            @*Nombre*@
                            <div>
                                <label class="form-label" for="Nombre">Nombre</label>
                                <InputText class="form-control" id="Nombre" placeholder="John Walker" @bind-Value="Tarjetas.Nombres"></InputText>
                                <ValidationMessage For="(() => Tarjetas.Nombres)"></ValidationMessage>

                            </div>

                            <div class="footer">
                                @*Fecha de Vencimiento*@
                                <div>
                                    <label for="FechaVencimiento" class="form-label">Valido hasta</label>
                                    <InputText class="form-control" id="FechaVencimiento" @bind-Value="Tarjetas.FechaVencimiento"
                                               placeholder="01/2028" />
                                    <ValidationMessage For="(() => Tarjetas.FechaVencimiento)"></ValidationMessage>
                                </div>

                                @*CVV*@
                                <div>
                                    <label for="CVV" class="form-label">CVV</label>
                                    <InputText class="form-control" placeholder="351" id="CVV" @bind-Value="Tarjetas.CVV"></InputText>
                                    <ValidationMessage For="(() => Tarjetas.CVV)"></ValidationMessage>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="credit-card-column">
                        
                        <a href="/" class="btn btn-outline-secondary bi bi-arrow-left mt-3">Volver</a>
                        <button type="submit" class="btn btn-outline-success bi bi-floppy mt-3">Guardar</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</EditForm>

@code {
    public TarjetasDto Tarjetas { get; set; } = new TarjetasDto();


    // Para Visa (13 o 16 dígitos)
    string patronVisa = @"^4[0-9]{12}(?:[0-9]{3})?$";
    string? VisaStyle => Regex.IsMatch(Tarjetas.NumeroTarjeta, patronVisa) ? "visa-style" : null;


    // Para Mastercard (16 dígitos)
    string patronMastercard = @"^5[1-5][0-9]{14}$";
    string? MasterCardStyle => Regex.IsMatch(Tarjetas.NumeroTarjeta, patronMastercard) ? "mastercard-style" : null;

    string CardLabel
    {
        get
        {
            if (VisaStyle is not null) return "Visa";
            if (MasterCardStyle is not null) return "MasterCard";
            else return "Desconocido";
        }
    }

    public async Task Guardar()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Verificar si el usuario no está autenticado
        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            Toast.Notify(new(ToastType.Warning, $"Debe iniciar sesión para guardar una tarjeta."));
            await Task.Delay(4000);
            navigation.NavigateTo("/Account/Login");
            return;
        }

        // Obtener el ID del usuario autenticado
        string? usuarioId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(usuarioId))
        {
            Toast.Notify(new(ToastType.Danger, $"No se pudo obtener el ID del usuario."));
            return;
        }

        // Asignar el ID del usuario a la tarjeta
        Tarjetas.UsuarioId = usuarioId;

        // Validar el CVV
        if (string.IsNullOrEmpty(Tarjetas.CVV) || Tarjetas.CVV.Length < 3 || Tarjetas.CVV.Length > 4)
        {
            Toast.Notify(new(ToastType.Danger, $"El CVV debe tener entre 3 y 4 dígitos."));
            return;
        }

        // Validar el número de tarjeta
        if (string.IsNullOrEmpty(Tarjetas.NumeroTarjeta))
        {
            Toast.Notify(new(ToastType.Danger, $"El número de tarjeta no puede estar vacío."));
            return;
        }
        if (!ValidarNumeroTarjeta(Tarjetas.NumeroTarjeta))
        {
            Toast.Notify(new(ToastType.Danger, $"El número de tarjeta no es válido."));
            return;
        }

        // Verificar si la tarjeta ya está registrada para este usuario
        bool tarjetaExistente = await tarjetasService.ExisteTarjetaParaUsuarioAsync(Tarjetas.NumeroTarjeta, usuarioId);
        if (tarjetaExistente)
        {
            Toast.Notify(new(ToastType.Danger, $"Ya tienes registrada esta tarjeta."));
            return;
        }

        // Formatear y validar la fecha de vencimiento
        if (!string.IsNullOrEmpty(Tarjetas.FechaVencimiento) && !Tarjetas.FechaVencimiento.Contains("/"))
        {
            Tarjetas.FechaVencimiento = Tarjetas.FechaVencimiento.Insert(2, "/");
        }

        if (!ValidarFechaVencimiento(Tarjetas.FechaVencimiento))
        {
            Toast.Notify(new(ToastType.Danger, $"La fecha no puede ser anterior a la actual."));
            return;
        }

        // Validar el nombre
        if (string.IsNullOrWhiteSpace(Tarjetas.Nombres))
        {
            Toast.Notify(new(ToastType.Danger, $"El nombre no puede estar vacío."));
            return;
        }

        // Guardar la tarjeta
        await tarjetasService.Guardar(Tarjetas);
        Tarjetas = new TarjetasDto();
        Toast.Notify(new(ToastType.Success, $"Su tarjeta ha sido registrada exitosamente."));
        await Task.Delay(3000);
        navigation.NavigateTo("/");
    }


    public bool ValidarNumeroTarjeta(string numeroTarjeta)
    {
        numeroTarjeta = numeroTarjeta.Replace(" ", "");

        if (numeroTarjeta.Length < 13 || numeroTarjeta.Length > 19 || !numeroTarjeta.All(char.IsDigit))
        {
            return false;
        }

        int suma = 0;
        bool esPar = false;

        for (int i = numeroTarjeta.Length - 1; i >= 0; i--)
        {
            int digito = int.Parse(numeroTarjeta[i].ToString());


            if (esPar)
            {
                digito *= 2;

                if (digito > 9)
                {
                    digito -= 9;
                }
            }

            suma += digito;
            esPar = !esPar;
        }

        return suma % 10 == 0;
    }

    public bool ValidarFechaVencimiento(string fechaVencimiento)
    {
        if (string.IsNullOrEmpty(fechaVencimiento) || !Regex.IsMatch(fechaVencimiento, @"^\d{2}/\d{4}$"))
        {
            return false;
        }

        var fechaParts = fechaVencimiento.Split('/');
        int mes = int.Parse(fechaParts[0]);
        int año = int.Parse(fechaParts[1]);

        DateTime fechaVenc = new DateTime(año, mes, 1).AddMonths(1).AddDays(-1);

        return fechaVenc > DateTime.Now;
    }
}
