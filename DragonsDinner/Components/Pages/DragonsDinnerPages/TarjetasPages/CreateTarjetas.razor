@page "/Tarjetas/Create"
@using System.Text.RegularExpressions
@rendermode InteractiveServer
@inject TarjetasService tarjetasService
@inject NavigationManager navigation

<PageTitle>Agregar Tarjetas</PageTitle>

<EditForm Model="@Tarjetas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Guardar Tarjetas</h5>
            </div>

            <div class="card-body">
                @*Tarjeta ID*@
                <div class="mb-3">
                    <label for="TarjetaId" class="form-label"><strong>Tarjeta Id</strong></label>
                    <InputNumber class="form-control" @bind-Value="Tarjetas.TarjetaId" readonly></InputNumber>
                </div>

                @*Nombre*@
                <div class="mb-3">
                    <label for="Nombre" class="form-label"><strong>Nombre</strong></label>
                    <InputText class="form-control" @bind-Value="Tarjetas.Nombres"></InputText>
                    <ValidationMessage For="(() => Tarjetas.Nombres)"></ValidationMessage>
                </div>

                @*Numero de Tarjeta*@
                <div class="mb-3">
                    <label for="NumeroTarjeta" class="form-label"><strong>Numero de Tarjeta</strong></label>
                    <InputText class="form-control" @bind-Value="Tarjetas.NumeroTarjeta"></InputText>
                    <ValidationMessage For="(() => Tarjetas.NumeroTarjeta)"></ValidationMessage>
                    @if (!string.IsNullOrEmpty(MensajeErrorTarjeta))
                    {
                        <div class="alert alert-danger" role="alert">
                            @MensajeErrorTarjeta
                        </div>
                    }
                </div>

                @*Fecha de Vencimiento*@
                <div class="mb-3">
                    <label for="FechaVencimiento" class="form-label"><strong>Fecha de Vencimiento (DD/YYYY)</strong></label>
                    <InputText class="form-control" @bind-Value="Tarjetas.FechaVencimiento"
                               placeholder="DD/YYYY" />
                    <ValidationMessage For="(() => Tarjetas.FechaVencimiento)"></ValidationMessage>
                    @if (!string.IsNullOrEmpty(MensajeErrorFV))
                    {
                        <div class="alert alert-danger" role="alert">
                            @MensajeErrorFV
                        </div>
                    }
                </div>

                @*CVV*@
                <div class="mb-3">
                    <label for="CVV" class="form-label"><strong>CVV</strong></label>
                    <InputText class="form-control" @bind-Value="Tarjetas.CVV"></InputText>
                    <ValidationMessage For="(() => Tarjetas.CVV)"></ValidationMessage>
                    @if (!string.IsNullOrEmpty(MensajeErrorCVV))
                    {
                        <div class="alert alert-danger" role="alert">
                            @MensajeErrorCVV
                        </div>
                    }
                </div>

            </div>

            <div class="card-footer text-center mt-2">
                <a href="/Tarjetas/Index" class="btn btn-outline-primary bi bi-arrow-left mt-3">Volver</a>
                <button type="submit" class="btn btn-outline-success bi bi-floppy mt-3">Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public TarjetasDto Tarjetas { get; set; } = new TarjetasDto();
    public string Mensaje { get; set; } = string.Empty;
    public string MensajeErrorCVV { get; set; } = string.Empty;
    public string MensajeErrorFV { get; set; } = string.Empty;
    public string MensajeErrorTarjeta { get; set; } = string.Empty;

    public async Task Guardar()
    {
        if (string.IsNullOrEmpty(Tarjetas.CVV) || Tarjetas.CVV.Length < 3 || Tarjetas.CVV.Length > 4)
        {
            MensajeErrorCVV = "El CVV debe tener entre 3 y 4 dígitos.";
            return;
        }
        if (!ValidarNumeroTarjeta(Tarjetas.NumeroTarjeta))
        {
            MensajeErrorTarjeta = "El número de tarjeta no es válido.";
            return;
        }

        bool tarjetaExistente = await tarjetasService.ExisteTarjetaAsync(Tarjetas.NumeroTarjeta);
        if (tarjetaExistente)
        {
            MensajeErrorTarjeta = "La tarjeta ya está registrada.";
            return;
        }

        if (!string.IsNullOrEmpty(Tarjetas.FechaVencimiento) && !Tarjetas.FechaVencimiento.Contains("/"))
        {
            Tarjetas.FechaVencimiento = Tarjetas.FechaVencimiento.Insert(2, "/");
        }

        if (!ValidarFechaVencimiento(Tarjetas.FechaVencimiento))
        {
            MensajeErrorFV = "La fecha de vencimiento debe ser posterior a la fecha actual.";
            return;
        }

        await tarjetasService.Guardar(Tarjetas);
        Tarjetas = new TarjetasDto();
        navigation.NavigateTo("/Tarjetas/Index");
    }

    public bool ValidarNumeroTarjeta(string numeroTarjeta)
    {
        numeroTarjeta = numeroTarjeta.Replace(" ", "");

        if (numeroTarjeta.Length < 13 || numeroTarjeta.Length > 19 || !numeroTarjeta.All(char.IsDigit))
        {
            return false;
        }

        int suma = 0;
        bool esPar = false;

        for (int i = numeroTarjeta.Length - 1; i >= 0; i--)
        {
            int digito = int.Parse(numeroTarjeta[i].ToString());

            
            if (esPar)
            {
                digito *= 2;

                if (digito > 9)
                {
                    digito -= 9;
                }
            }

            suma += digito;
            esPar = !esPar;
        }

        return suma % 10 == 0;
    }

    public bool ValidarFechaVencimiento(string fechaVencimiento)
    {
        if (string.IsNullOrEmpty(fechaVencimiento) || !Regex.IsMatch(fechaVencimiento, @"^\d{2}/\d{4}$"))
        {
            return false;
        }

        var fechaParts = fechaVencimiento.Split('/');
        int mes = int.Parse(fechaParts[0]);
        int año = int.Parse(fechaParts[1]);

        DateTime fechaVenc = new DateTime(año, mes, 1).AddMonths(1).AddDays(-1);

        return fechaVenc > DateTime.Now;
    }
}
