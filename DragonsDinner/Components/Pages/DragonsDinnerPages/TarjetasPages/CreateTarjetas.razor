@page "/Tarjetas/Create"
@using System.Text.RegularExpressions
@rendermode InteractiveServer
@inject TarjetasService tarjetasService
@inject NavigationManager navigation
@inject ToastService Toast

<link rel=" stylesheet" href="/Estilos/Tarjetas.css" />

<PageTitle>Agregar Tarjetas</PageTitle>
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<EditForm Model="@Tarjetas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Guardar Tarjetas</h5>
            </div>

            <div class="card-body">
                <div class="credit-card">
                    <div class="bank">BANK</div>
                    <div class="chip"></div>
                    <div class="card-info">
                        @*Número de Tarjeta*@
                        <div>
                            <label class="form-label" for="NumeroTarjeta">N&uacute;mero tarjeta</label>
                            <InputText class="form-control" id="NumeroTarjeta" placeholder="7735 4299 1255 0133" @bind-Value="Tarjetas.NumeroTarjeta"></InputText>
                            <ValidationMessage For="(() => Tarjetas.NumeroTarjeta)"></ValidationMessage>
                        </div>

                        @*Nombre*@
                        <div>
                            <label class="form-label" for="Nombre">Nombre</label>
                            <InputText class="form-control" id="Nombre" placeholder="John Walker" @bind-Value="Tarjetas.Nombres"></InputText>
                            <ValidationMessage For="(() => Tarjetas.Nombres)"></ValidationMessage>
                        </div>

                        <div class="footer">
                            @*Fecha de Vencimiento*@
                            <div>
                                <label for="FechaVencimiento" class="form-label">Valido hasta</label>
                                <InputText class="form-control" id="FechaVencimiento" @bind-Value="Tarjetas.FechaVencimiento"
                                           placeholder="01/2028" />
                                <ValidationMessage For="(() => Tarjetas.FechaVencimiento)"></ValidationMessage>
                            </div>

                            @*CVV*@
                            <div>
                                <label for="CVV" class="form-label">CVV</label>
                                <InputText class="form-control" placeholder ="351" id="CVV" @bind-Value="Tarjetas.CVV"></InputText>
                                <ValidationMessage For="(() => Tarjetas.CVV)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-footer text-center mt-2">
                <a href="/Tarjetas/Index" class="btn btn-outline-secondary bi bi-arrow-left mt-3">Volver</a>
                <button type="submit" class="btn btn-outline-success bi bi-floppy mt-3">Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public TarjetasDto Tarjetas { get; set; } = new TarjetasDto();

    public async Task Guardar()
    {
        if (string.IsNullOrEmpty(Tarjetas.CVV) || Tarjetas.CVV.Length < 3 || Tarjetas.CVV.Length > 4)
        {
            Toast.Notify(new(ToastType.Danger, "El CVV debe tener entre 3 y 4 dígitos."));
            return;
        }
        if (!ValidarNumeroTarjeta(Tarjetas.NumeroTarjeta))
        {
            Toast.Notify(new(ToastType.Danger, "El número de tarjeta no es válido."));
            return;
        }

        bool tarjetaExistente = await tarjetasService.ExisteTarjetaAsync(Tarjetas.NumeroTarjeta);
        if (tarjetaExistente)
        {
            Toast.Notify(new(ToastType.Danger, "La tarjeta ya está registrada."));
            return;
        }

        if (!string.IsNullOrEmpty(Tarjetas.FechaVencimiento) && !Tarjetas.FechaVencimiento.Contains("/"))
        {
            Tarjetas.FechaVencimiento = Tarjetas.FechaVencimiento.Insert(2, "/");
        }

        if (!ValidarFechaVencimiento(Tarjetas.FechaVencimiento))
        {
            Toast.Notify(new(ToastType.Danger, "La fecha de vencimiento debe ser anterior a la fecha actual."));
            return;
        }

        await tarjetasService.Guardar(Tarjetas);
        Toast.Notify(new(ToastType.Success, "Tarjeta agregada exitosamente."));
        await Task.Delay(2000);
        Tarjetas = new TarjetasDto();
        navigation.NavigateTo("/Tarjetas/Index");
    }

    public bool ValidarNumeroTarjeta(string numeroTarjeta)
    {
        numeroTarjeta = numeroTarjeta.Replace(" ", "");

        if (numeroTarjeta.Length < 13 || numeroTarjeta.Length > 19 || !numeroTarjeta.All(char.IsDigit))
        {
            return false;
        }

        int suma = 0;
        bool esPar = false;

        for (int i = numeroTarjeta.Length - 1; i >= 0; i--)
        {
            int digito = int.Parse(numeroTarjeta[i].ToString());

            
            if (esPar)
            {
                digito *= 2;

                if (digito > 9)
                {
                    digito -= 9;
                }
            }

            suma += digito;
            esPar = !esPar;
        }

        return suma % 10 == 0;
    }

    public bool ValidarFechaVencimiento(string fechaVencimiento)
    {
        if (string.IsNullOrEmpty(fechaVencimiento) || !Regex.IsMatch(fechaVencimiento, @"^\d{2}/\d{4}$"))
        {
            return false;
        }

        var fechaParts = fechaVencimiento.Split('/');
        int mes = int.Parse(fechaParts[0]);
        int año = int.Parse(fechaParts[1]);

        DateTime fechaVenc = new DateTime(año, mes, 1).AddMonths(1).AddDays(-1);

        return fechaVenc > DateTime.Now;
    }
}
