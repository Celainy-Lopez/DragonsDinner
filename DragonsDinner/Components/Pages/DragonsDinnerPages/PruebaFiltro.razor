@page "/Productos"
@rendermode InteractiveServer
@inject ProductosService productosService
@inject CategoriasService categoriasService

<div class="container">
    <div class="overlay">
        <h3 class="text-center text-white filtro-titulo">¿Qué producto deseas comprar?</h3>
        <ul class="filters_menu">
            @foreach (var filtro in Categorias)
            {
                <li @onclick="() => SeleccionarFiltro(filtro.Nombre)"
                    class="@(FiltroActivo == filtro.Nombre ? "active" : "")">
                    @filtro.Nombre
                </li>
            }
        </ul>
        <div class="tarjetas-contenedor">
            @foreach (var producto in ListProductos)
            {
                <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.5s" style="visibility: visible; animation-delay: 0.5s; animation-name: fadeInUp;">
                    <div class="property-item rounded overflow-hidden">
                        <div class="position-relative overflow-hidden">
                            <a href="/Productos/Detalles/@producto.ProductoId">
                                <img src="@producto.Imagen" alt="@producto.Nombre" title="@producto.Nombre" class="img-fluid" style="height:200px;" />
                            </a>
                        </div>
                        <div class="p-4 pb-0">
                            <h5 class="text-primary mb-3">Precio</h5>
                            <p><i class="fa fa-tag text-primary me-2"></i>$@producto.Precio.ToString("N2")</p>
                            <a class="d-block h5 mb-2" href="/Productos/Detalles/@producto.ProductoId">@producto.Nombre</a>
                            <p class="f small">@producto.Descripcion</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    public List<ProductosDto> ListProductos { get; set; } = new List<ProductosDto>();
    public List<CategoriasDto> Categorias { get; set; } = new List<CategoriasDto>();
    public string FiltroActivo { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Cargar todas las categorías y productos al inicializar el componente
        Categorias = await categoriasService.Listar(p => true);
        ListProductos = await productosService.Listar(p => true);
    }

    public async Task SeleccionarFiltro(string categoriaNombre)
    {
        FiltroActivo = categoriaNombre;

        // Filtrar productos según la categoría seleccionada
        if (!string.IsNullOrEmpty(FiltroActivo))
        {
            ListProductos = await productosService.Listar(p => p.CategoriaNombre == FiltroActivo);
        }
        else
        {
            // Si no hay filtro, mostrar todos los productos
            ListProductos = await productosService.Listar(p => true);
        }

        // Forzar la actualización de la interfaz para reflejar el filtro
        StateHasChanged();
    }
}
